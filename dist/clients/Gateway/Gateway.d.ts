import ws from 'ws';
import { ILockServiceOptions } from '../../common';
import { GuildRequestMembers } from '../../types';
import { GatewayOptions, SessionLimitData } from './types';
export default class Gateway {
    #private;
    online: boolean;
    lastKnownSessionLimitData?: SessionLimitData;
    private static validateLockOptions;
    constructor(token: string, options: GatewayOptions);
    get resumable(): boolean;
    private get shard();
    get id(): number;
    get connected(): boolean;
    private bindTimerFunctions;
    private log;
    private emit;
    addIdentifyLockServices(mainServiceOptions: null | Partial<ILockServiceOptions>, ...serviceOptions: Partial<ILockServiceOptions>[]): void;
    private configureLockService;
    private recreateRpcService;
    requestGuildMembers(guildId: string, options?: Partial<GuildRequestMembers>): boolean;
    private checkLocksPromise;
    private loginWaitForLocks;
    login(_websocket?: typeof ws): Promise<void>;
    releaseIdentifyLocks(): Promise<void>;
    private getWebsocketUrl;
    private handleBadStatus;
    private assignWebsocketMethods;
    private handleEvent;
    private _onopen;
    private _onerror;
    private _onclose;
    private handleCloseCode;
    private clearSession;
    private clearHeartbeat;
    private _onmessage;
    private handleMessage;
    private handleReady;
    private handleResumed;
    private handleHello;
    private startHeartbeat;
    private heartbeat;
    private handleHeartbeatAck;
    private connect;
    private resume;
    private identify;
    private acquireLocks;
    private acquireIdentifyLocks;
    private acquireIdentifyLock;
    private releaseIdentifyLock;
    private send;
    private canSendPacket;
    private updateWsRateLimit;
    private handleInvalidSession;
    private updateSequence;
}
